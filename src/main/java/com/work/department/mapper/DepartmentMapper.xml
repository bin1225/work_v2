<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.work.department.mapper.DepartmentMapper">
    <insert id="insert" parameterType="com.work.department.Department" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO department (name, parent_id, available, depth, registration_date_time, create_id, update_id)
        VALUES (#{name}, #{parentId}, 'Y', #{depth}, now(), #{createId}, #{updateId})
    </insert>

    <insert id="insertHistory" parameterType="com.work.department.Department">
        INSERT INTO department_history (department_id, name, parent_id, available, depth, registration_date_time, update_id)
        VALUES (#{id}, #{name}, #{parentId}, #{available}, #{depth}, now(), #{updateId})
    </insert>

    <select id="selectOne" resultType="com.work.department.Department">
        SELECT id, name, parent_id, available, depth, update_id
        FROM department
        WHERE id = #{id}
          AND available = 'Y'
    </select>

    <select id="selectExistLower" resultType="boolean">
        SELECT EXISTS(SELECT 1 FROM department WHERE parent_id = #{id} AND available = 'Y')
    </select>

    <select id="selectAll" resultType="com.work.department.Department">
        SELECT id, name, parent_id
        FROM department
        WHERE available = 'Y'
    </select>

    <select id="selectDepth" resultType="Integer" parameterType="Long">
        WITH RECURSIVE department_depth (id, parent_id, depth) AS
                           (
                               SELECT id,
                                      parent_id,
                                      0 AS depth
                               FROM department
                               WHERE id = #{departmentId}

                               UNION ALL

                               SELECT department.id,
                                      department.parent_id,
                                      department_depth.depth + 1 AS depth
                               FROM department
                                        INNER JOIN department_depth
                                                   ON department.id = department_depth.parent_id
                           )
        SELECT MAX(depth)
        FROM department_depth
    </select>

    <update id="delete" keyProperty="available">
        UPDATE department
        SET available              = 'N',
            registration_date_time = now(),
            update_id              = #{userId}
        WHERE id = #{departmentId}
    </update>
</mapper>
